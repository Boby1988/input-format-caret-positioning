{"version":3,"sources":["reducers/index.js","services/store.js","utils/format.js","form.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","form","formReducer","enhancers","devToolsExtension","window","noop","push","composedEnhancers","compose","apply","applyMiddleware","concat","store","createStore","rootReducer","Formatter","opts","re","blocks","delimiter","method","type","transformValue","formatter","normalizer","insertionPoints","value","previousValue","length","result","rawValue","getRawValue","forEach","index","sub","slice","rest","replace","positioner","event","element","target","caret","selectionStart","pvLength","formattedValue","vLength","searchString","nextChar","substr","currChar","Math","min","requestAnimationFrame","selectionEnd","Row","props","react_default","a","createElement","Object","assign","style","marginTop","marginBottom","renderTextField","_ref","input","label","meta","objectWithoutProperties","display","dateFormatter","taxFormatter","reduxForm","onSubmit","values","console","log","_ref2","handleSubmit","autoComplete","form_Row","Field","component","name","normalize","onChange","format","App","es","className","src_form","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.051f2282.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\n\r\n\r\nexport default combineReducers({\r\n  form: formReducer,\r\n})\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\n// import createSagaMiddleware from 'redux-saga'\r\nimport rootReducer from '../reducers'\r\n// import rootSaga from './sagas'\r\n\r\n// const sagaMiddleware = createSagaMiddleware()\r\nconst enhancers = []\r\nconst middlewares = [\r\n  // sagaMiddleware,\r\n  // checkTokenMiddleware,\r\n]\r\n\r\n// if (process.env.NODE_ENV === 'development') {\r\n  const devToolsExtension = window['__REDUX_DEVTOOLS_EXTENSION__'] || (() => (noop) => noop)\r\n\r\n  if (typeof devToolsExtension === 'function') {\r\n    enhancers.push(devToolsExtension())\r\n  }\r\n// }\r\n\r\nconst composedEnhancers = compose(\r\n  applyMiddleware(...middlewares),\r\n  ...enhancers\r\n)\r\n\r\nconst initialState = {}\r\n\r\n\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composedEnhancers\r\n)\r\n\r\n// sagaMiddleware.run(rootSaga)\r\n\r\nexport default store\r\n","export default function Formatter(opts) {\r\n  const { re, blocks, delimiter, type } = opts\r\n  const method = type || 'parse'\r\n  const transformValue = method === 'format' ? formatter : normalizer\r\n\r\n  const insertionPoints = []\r\n  blocks.forEach(function(length, index) {\r\n    insertionPoints[index] = length + index ? insertionPoints[index-1] : 0\r\n  })\r\n\r\n\r\n  function normalizer(value, previousValue) {\r\n    // delete\r\n    if(previousValue && previousValue.length > value.length) {\r\n      return value\r\n    } else {\r\n      return formatter(value)\r\n    }\r\n  }\r\n\r\n  function formatter(value) { // used on format or parse\r\n    if(!value) {\r\n      return ''\r\n    }\r\n\r\n    let result = ''\r\n    let rawValue = getRawValue(value)\r\n\r\n    blocks.forEach(function (length, index) {\r\n      if (rawValue.length > 0) {\r\n        var sub = rawValue.slice(0, length),\r\n            rest = rawValue.slice(length);\r\n\r\n        result += sub;\r\n\r\n        if (sub.length === length && index < blocks.length - 1) {\r\n          result += delimiter;\r\n        }\r\n        // update remaining string\r\n        rawValue = rest;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  function getRawValue(value) {\r\n    if(!value) {\r\n      return ''\r\n    }\r\n    return re ? value.replace(re, '') : value\r\n  }\r\n\r\n  function positioner(event, value, previousValue) {\r\n      // positioning\r\n    const element = event.target\r\n    let caret = element.selectionStart\r\n\r\n    if(previousValue) {\r\n      const pvLength = transformValue(previousValue).length\r\n      const formattedValue = transformValue(value)\r\n      const vLength = formattedValue.length\r\n      const searchString = method === 'format' ? formattedValue : value\r\n      const nextChar = searchString.substr(caret, 1)\r\n      const currChar = searchString.substr(caret - 1, 1)\r\n\r\n      if(pvLength <= vLength && (nextChar === delimiter || currChar === delimiter)) {\r\n        caret = Math.min(caret + 1, searchString.length)\r\n      }\r\n    }\r\n\r\n    window.requestAnimationFrame(function() {\r\n      element.selectionStart = caret\r\n      element.selectionEnd = caret\r\n    })\r\n  }\r\n\r\n  return {\r\n    formatter,\r\n    positioner,\r\n    normalizer,\r\n    getRawValue,\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport Formatter from './utils/format'\r\n\r\n\r\nconst Row = props => (\r\n  <div style={{ marginTop: '0.5em', marginBottom: '1em'}} {...props} />\r\n)\r\n\r\nconst renderTextField = ({ input, label, meta, ...rest }) => (\r\n  <div {...rest}>\r\n    {label && (<label style={{ display: 'block' }}>{label}</label>)}\r\n    <input type=\"text\" {...input}/>\r\n  </div>\r\n)\r\n\r\n\r\nconst dateFormatter = new Formatter({ delimiter: '-', re: /[^0-9]/g, blocks: [4,2,2] })\r\nconst taxFormatter = new Formatter({ delimiter: '-', re: /[^0-9]/g, blocks: [8,1,2], type: 'format' })\r\n\r\n\r\nconst MyForm = ({ handleSubmit }) => (\r\n  <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n    <Row>\r\n      <Field\r\n        component={renderTextField}\r\n        label=\"Date (yyyy-mm-dd)\"\r\n        name=\"date\"\r\n        normalize={dateFormatter.normalizer}\r\n        onChange={dateFormatter.positioner}\r\n      />\r\n    </Row>\r\n\r\n    <Row>\r\n      <Field\r\n        component={renderTextField}\r\n        label=\"Tax number (xxxxxxxx-x-xx)\"\r\n        name=\"tax_number\"\r\n        format={taxFormatter.formatter}\r\n        normalize={taxFormatter.getRawValue}\r\n        onChange={taxFormatter.positioner}\r\n      />\r\n    </Row>\r\n\r\n    <button type=\"submit\">Ment√©s</button>\r\n  </form>\r\n)\r\n\r\n\r\n\r\nexport default reduxForm({\r\n  form: 'test_form',\r\n  onSubmit: function(values) { console.log('Submit form values: ', values )}\r\n})(MyForm)\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux'\r\nimport store from './services/store'\r\nimport ReduxForm from './form'\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <h4>Test form comes here</h4>\r\n\r\n \r\n        <ReduxForm />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}