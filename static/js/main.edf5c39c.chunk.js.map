{"version":3,"sources":["reducers/index.js","services/store.js","form.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","form","formReducer","enhancers","devToolsExtension","window","noop","push","composedEnhancers","compose","apply","applyMiddleware","concat","store","createStore","rootReducer","Row","props","react_default","a","createElement","Object","assign","style","marginTop","marginBottom","caretPositioning","_ref","delimiter","re","getRawValue","value","replace","event","previousValue","name","element","target","caret","selectionStart","length","substring","Math","min","requestAnimationFrame","selectionEnd","renderTextField","_ref2","input","rest","objectWithoutProperties","type","normalizeDate","blocks","result","rawValue","forEach","index","sub","slice","reduxForm","_ref3","handleSubmit","onSubmit","autoComplete","form_Row","Field","component","normalize","onChange","App","es","className","src_form","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAKeA,cAAgB,CAC7BC,KAAMC,MCAFC,EAAY,GAOVC,EAAoBC,OAAM,8BAAqC,kBAAM,SAACC,GAAD,OAAUA,IAEpD,oBAAtBF,GACTD,EAAUI,KAAKH,KAInB,IAAMI,EAAoBC,IAAOC,WAAP,GACxBC,IAAeD,WAAf,EAdkB,KAaME,OAErBT,IAeUU,EARDC,YACZC,EALmB,GAOnBP,6BC5BIQ,EAAM,SAAAC,GAAK,OACfC,EAAAC,EAAAC,cAAA,MAAAC,OAAAC,OAAA,CAAKC,MAAO,CAAEC,UAAW,QAASC,aAAc,QAAYR,KAK9D,SAASS,EAATC,GAA6C,IAAjBC,EAAiBD,EAAjBC,UAAWC,EAAMF,EAANE,GACrC,SAASC,EAAYC,GACnB,OAAIA,EAGDF,EACME,EAAMC,QAAQH,EAAI,IAEpBE,EALE,GAQX,OAAO,SAASE,EAAOF,EAAOG,EAAeC,GAE3C,IAAMC,EAAUH,EAAMI,OAClBC,EAAQF,EAAQG,eAEjBL,IACgBJ,EAAYI,GAAeM,QAC5BV,EAAYC,GAAOS,QAETT,EAAMU,UAAUH,EAAOA,EAAQ,KAAOV,IAC9DU,EAAQI,KAAKC,IAAIL,EAAQ,EAAGP,EAAMS,UAKtCnC,OAAOuC,sBAAsB,WAC3BR,EAAQG,eAAiBD,EACzBF,EAAQS,aAAeP,KAK7B,IAAMQ,EAAkB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAUC,EAAb5B,OAAA6B,EAAA,EAAA7B,CAAA0B,EAAA,kBACtB7B,EAAAC,EAAAC,cAAA,MAAS6B,EACP/B,EAAAC,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CAAO6B,KAAK,QAAWH,MAI3B,SAASI,EAAcrB,EAAOG,GAE5B,IAAIH,EACF,MAAO,GAET,IAAMsB,EAAS,CAAC,EAAG,EAAG,GAItB,GAAGnB,GAAiBA,EAAcM,OAAST,EAAMS,OAC/C,OAAOT,EAEP,IAAIuB,EAAS,GACTC,EAAWxB,EAAMC,QAAQ,UAAW,IAkBxC,OAfAqB,EAAOG,QAAQ,SAAUhB,EAAQiB,GAC/B,GAAIF,EAASf,OAAS,EAAG,CACvB,IAAIkB,EAAMH,EAASI,MAAM,EAAGnB,GACxBS,EAAOM,EAASI,MAAMnB,GAE1Bc,GAAUI,EAENA,EAAIlB,SAAWA,GAAUiB,EAAQJ,EAAOb,OAAS,IACjDc,GAlBQ,KAsBZC,EAAWN,KAGRK,EAMX,IAqBeM,cAAU,CACvB3D,KAAM,aADO2D,CArBA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAH,OACb5C,EAAAC,EAAAC,cAAA,QAAM2C,SAAUD,EAAcE,aAAa,OACzC9C,EAAAC,EAAAC,cAAC6C,EAAD,KACE/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CACEC,UAAWrB,EACXX,KAAK,OACLiC,UAAWhB,EACXiB,SAAU3C,EAAiB,CAAEE,UAAW,IAAKC,GAAI,eAQrDX,EAAAC,EAAAC,cAAA,UAAQ+B,KAAK,UAAb,gBCnFWmB,MAbf,WACE,OACEpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAU1D,MAAOA,GACfK,EAAAC,EAAAC,cAAA,OAAKoD,UAAU,OACbtD,EAAAC,EAAAC,cAAA,kCAGAF,EAAAC,EAAAC,cAACqD,EAAD,SCAYC,QACW,cAA7BrE,OAAOsE,SAASC,UAEe,UAA7BvE,OAAOsE,SAASC,UAEhBvE,OAAOsE,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.edf5c39c.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\n\r\n\r\nexport default combineReducers({\r\n  form: formReducer,\r\n})\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\n// import createSagaMiddleware from 'redux-saga'\r\nimport rootReducer from '../reducers'\r\n// import rootSaga from './sagas'\r\n\r\n// const sagaMiddleware = createSagaMiddleware()\r\nconst enhancers = []\r\nconst middlewares = [\r\n  // sagaMiddleware,\r\n  // checkTokenMiddleware,\r\n]\r\n\r\n// if (process.env.NODE_ENV === 'development') {\r\n  const devToolsExtension = window['__REDUX_DEVTOOLS_EXTENSION__'] || (() => (noop) => noop)\r\n\r\n  if (typeof devToolsExtension === 'function') {\r\n    enhancers.push(devToolsExtension())\r\n  }\r\n// }\r\n\r\nconst composedEnhancers = compose(\r\n  applyMiddleware(...middlewares),\r\n  ...enhancers\r\n)\r\n\r\nconst initialState = {}\r\n\r\n\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composedEnhancers\r\n)\r\n\r\n// sagaMiddleware.run(rootSaga)\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport { reduxForm, Field } from 'redux-form'\r\n\r\n\r\nconst Row = props => (\r\n  <div style={{ marginTop: '0.5em', marginBottom: '1em'}} {...props} />\r\n)\r\n\r\n\r\n\r\nfunction caretPositioning({ delimiter, re }) {\r\n  function getRawValue(value) {\r\n    if(!value) {\r\n      return ''\r\n    }\r\n    if(re) {\r\n      return value.replace(re, '')\r\n    }\r\n    return value\r\n  }\r\n\r\n  return function(event, value, previousValue, name) {\r\n    // positioning\r\n    const element = event.target\r\n    let caret = element.selectionStart\r\n\r\n    if(previousValue) {\r\n      const pvLength = getRawValue(previousValue).length\r\n      const vLength = getRawValue(value).length\r\n\r\n      if(pvLength <= vLength && value.substring(caret, caret + 1) === delimiter) { // start to type in\r\n        caret = Math.min(caret + 1, value.length)\r\n      }\r\n    }\r\n\r\n\r\n    window.requestAnimationFrame(function() {\r\n      element.selectionStart = caret\r\n      element.selectionEnd = caret\r\n    })\r\n  }\r\n}\r\n\r\nconst renderTextField = ({ input, ...rest }) => (\r\n  <div {...rest}>\r\n    <input type=\"text\" {...input}/>\r\n  </div>\r\n)\r\n\r\nfunction normalizeDate(value, previousValue) {\r\n  // console.log('normalizeDate', { value, previousValue })\r\n  if(!value) {\r\n    return ''\r\n  }\r\n  const blocks = [4, 2, 2]\r\n  const delimiter = '-'\r\n\r\n\r\n  if(previousValue && previousValue.length > value.length) { // delete\r\n    return value\r\n  } else {\r\n    let result = ''\r\n    let rawValue = value.replace(/[^0-9]/g, '')\r\n\r\n\r\n    blocks.forEach(function (length, index) {\r\n      if (rawValue.length > 0) {\r\n        var sub = rawValue.slice(0, length),\r\n            rest = rawValue.slice(length);\r\n\r\n        result += sub;\r\n\r\n        if (sub.length === length && index < blocks.length - 1) {\r\n            result += delimiter;\r\n        }\r\n\r\n        // update remaining string\r\n        rawValue = rest;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n}\r\n\r\n\r\n\r\nconst MyForm = ({ handleSubmit }) => (\r\n  <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n    <Row>\r\n      <Field\r\n        component={renderTextField}\r\n        name=\"date\"\r\n        normalize={normalizeDate}\r\n        onChange={caretPositioning({ delimiter: '-', re: /[^0-9]/g })}\r\n      />\r\n    </Row>\r\n\r\n\r\n\r\n\r\n\r\n    <button type=\"submit\">Ment√©s</button>\r\n  </form>\r\n)\r\n\r\n\r\n\r\nexport default reduxForm({\r\n  form: 'test_form',\r\n})(MyForm)\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux'\r\nimport store from './services/store'\r\nimport ReduxForm from './form'\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <h4>Test form comes here</h4>\r\n\r\n \r\n        <ReduxForm />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}